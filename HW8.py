#                                    Лекция 7 Списъци


# Задача 1. Напишете програма, която чете цели числа въведени от потребителя и ги
# съхранява в списък. Програма трябва да продължи да чете стойности, докато
# потребителят не въведе 0. След това тя трябва да покаже всички стойности, въведени от
# потребителя (с изключение на 0), подредени от най-малката до най-голямата стойност,
# като на всеки ред се появява по една стойност. Използвайте или метода за сортиране,
# или функцията за сортиране на списъци.


# list = []
# x = 1
#
# while x != 0:
#     x = int(input("Please provide a number: "))
#     if x == 0:
#         break
#     else:
#         list.append(x)
#
# list_new = sorted(list)
#
# for el in list_new:
#     print(el)



# Задача 2. При анализиране на данни, събрани като част от научен експеримент, може
# да се наложи да се премахнат най-крайните (големите) стойности, преди да се
# извършват някакви други изчисления. Да се създаде списък от стойностите само с n на
# брой положителни числа. Трябва да се създаде ново копие на създаденият списък с
# премахнатите n най-големи елемента и n най-малките елементи. Редът на елементите
# във върнатия списък не трябва да съвпада с реда на елементите в първоначалния
# списък. Напишете програма, която да чете списък от числа въведени от потребителя и
# да премахва двете най-големи и двете най-малки стойности. Да се принтира новият
# списък, както и оригиналният. Програма трябва да генерира подходящо съобщение за
# грешка, ако потребителят въведе по-малко от 4 стойности.


# list = []
# n = 1
# count = 0
#
# while n != 0:
#     n = int(input("Please provide a positive number. If you want to stop adding numbers, please add 0: "))
#     if n > 0:
#         list.append(n)
#         count += 1
#     else:
#         break
#
# if count >= 4:
#     list_copy = list[:]
#     list_copy_asc = sorted(list_copy)
#
#     list_copy_asc.pop()
#     list_copy_asc.pop()
#
#     list_copy_dec = sorted(list_copy_asc, reverse=True)
#     list_copy_dec.pop()
#     list_copy_dec.pop()
#
#     print(list)
#     print(list_copy_dec)
# else:
#     print("You have added less then 4 numbers.")



# Задача 3. Да се създаде програма, която чете думи като вход от клавиатурата, докато
# потребителят не въведе празен ред. След като потребителят въведе празен ред,
# програмата трябва да изведе всяка дума, въведена от потребителя точно веднъж.
# Думите трябва да се показват в същия ред, в който са били въведени.


# list = []
# x = 1
#
# while x:
#     x = input("Please provide a word: ")
#     if x != " ":
#         list.append(x)
#     else:
#         break
#
#
# list_new = []
# for el in list:
#     if el not in list_new:
#         list_new.append(el)
#     else:
#         continue
#
#
# for el in list_new:
#     print(el)



# Задача 4. Да се създаде програма, която да чете цели числа въведени от потребителя,
# докато не бъде въведен празен ред. След като всичките числа са прочетени, програмата
# трябва да показва всички отрицателни числа, последвани от нули, последвани от всички
# положителни числа. Във всяка група номерата трябва да се показват в същия ред, в
# който са въведени от потребителя. Например, ако потребителят въведе стойностите 3, -
# 4, 1, 0, -1, 0 и -2, вашата програма трябва да изведе стойностите -4, -1, -2, 0, 0, 3 и 1 .
# Вашата програма трябва да показва всяка стойност на нов ред.


# list = []
# n = 1
#
# while n:
#     n = input("Please provide a number: ")
#     if n == "":
#         break
#     n1 = int(n)
#     list.append(n1)
#
# for el in list:
#     if el < 0:
#         print(el)
#
# for el in list:
#     if el == 0:
#         print(el)
#
# for el in list:
#     if el > 0:
#         print(el)


# Задача 5. За да спечели най-голямата награда в определена лотария, човек трябва да
# съпостави всичките 6 числа от билета си с 6-те числа между 1 и 49, които са изтеглени от
# организатора на лотарията. Напишете програма, която генерира произволен избор от 6
# числа за лотариен билет. Уверете се, че избраните 6 числа не се повтарят. Покажете
# числата във възходящ ред.

# import random
#
# list = []
# n = 1
#
# while n <= 6:
#     num = random.randint(1, 50)
#     if num not in list:
#         n += 1
#         list.append(num)
#     else:
#         continue
#
#
# print(sorted(list))



# Задача 6. Да се напише програма, която генерира всички подсписъци на даден списък.
# Например, списъците на [1, 2, 3] са [], [1], [2], [3], [1, 2], [2, 3], [1, 3] и [1, 2, 3].


# list = [1, 2, 3]
# length = len(list)
# a = []
#
# for i in list:
#     for j in list:
#         a.append(j)
#
# print(a)


# ???????????????????


# Задача 7. Напишете програма, която намира максимална редица от последователни
# еднакви елементи в списък.
# Пример: {2, 1, 1, 2, 3, 3, 2, 2, 2, 1} -> {2, 2, 2}. ‘2’ * counter


# list = [2, 1, 1, 2, 3, 3, 2, 2, 2, 1]
# result = 1
# max_result = 0
# last_seen = list[0]
#
# for el in list[1:]:
#     if el == last_seen:
#         result += 1
#
#
#     else:
#         if result > max_result:
#             max_result = result
#
#         last_seen = el
#         result = 1
#
# if result > max_result:
#     max_result = result
#
# print(max_result)


# ??????????? Частично решена


# Задача 8. Напишете програма, която намира максималната редица от последователни
# нарастващи елементи в списък.
# Пример: {3, 2, 3, 4, 2, 2, 4} -> {2, 3, 4}.


# list = [3, 2, 3, 4, 2, 2, 4]
# result = 1
# max_result = 0
# last_seen = list[0]
#
#
# for el in list[1:]:
#     if el - last_seen == 1:
#         result += 1
#
#
#     else:
#         if result > max_result:
#             max_result = result
#
#         last_seen = el
#         result = 1
#
# if result > max_result:
#     max_result = result
#
# print(max_result+1)


# ??????????? Частично решена


# Задача 9. Напишете програма, която създава следните квадратни матрици и ги
# извежда на конзолата във форматиран вид. Размерът на матриците се въвежда от
# конзолата. Пример за (4,4):



# list = [1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16]
# n = 0
#
# column_size = int(input("Enter size of column: "))
# row_size = int(input("Enter size of row: "))
#
# a = []
# b = []
#
#
#     # Initialize the column.
# for j in range(0, 1):
#     b.append(list[0:row_size])
#     # for el in list:
#     #     b.append(el)
#     # Append the column to each row.
#     for i in range(n, (column_size+n)):
#         a.append(b)
#         n += row_size
#     # Printing the 2d created array
#
# for elements in a:
#     print(elements, sep="\n")
#
#
# ??????????? Частично решена




